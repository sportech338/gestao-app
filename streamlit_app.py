import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px

st.set_page_config(page_title="Metas & Performance ‚Äî Tr√°fego Pago", layout="wide")

st.title("üìä Metas & Performance ‚Äî Tr√°fego Pago")
st.caption("Defina metas semanais/mensais e analise a performance real do Gerenciador (funil, m√≠dia, v√≠deo, ranking).")

# =========================
# Sidebar ‚Äî Par√¢metros gerais
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è Par√¢metros de Meta")
    aov = st.number_input("Ticket m√©dio (R$)", value=150.0, min_value=0.0, step=10.0, format="%.2f")
    to_checkout = st.number_input("Taxa Sess√£o ‚Üí Checkout (%)", value=5.0, min_value=0.0, max_value=100.0, step=0.5, format="%.2f") / 100.0
    checkout_conv = st.number_input("Taxa Checkout ‚Üí Compra (%)", value=40.0, min_value=0.0, max_value=100.0, step=1.0, format="%.2f") / 100.0
    target_roas = st.number_input("ROAS alvo (ex: 2.0 = 200%)", value=2.0, min_value=0.1, step=0.1, format="%.2f")

    st.markdown("---")
    st.subheader("üìÜ Janela Semanal")
    week_start = st.date_input(
        "In√≠cio da semana (segunda)",
        value=(datetime.today() - timedelta(days=datetime.today().weekday())).date(),
    )
    include_weekends = st.checkbox("Incluir finais de semana", value=True)

    st.subheader("üìÖ Janela Mensal")
    month_ref = st.date_input("Ref. do m√™s (qualquer dia do m√™s)", value=datetime.today().date())

    st.markdown("---")
    st.subheader("üéØ Tipo de Meta")
    goal_type = st.radio("Defina por:", options=["Faturamento", "Compras"], index=0, horizontal=True)
    weekly_goal_value = st.number_input("Meta SEMANAL (R$ se Faturamento; n¬∫ se Compras)", value=10000.0, min_value=0.0, step=100.0)
    monthly_goal_value = st.number_input("Meta MENSAL (R$ se Faturamento; n¬∫ se Compras)", value=40000.0, min_value=0.0, step=500.0)

    st.markdown("---")
    st.subheader("üö¶ Alertas")
    alert_roas_min = st.number_input("ROAS m√≠nimo aceit√°vel", value=1.5, step=0.1)
    alert_cpa_max = st.number_input("CPA m√°ximo aceit√°vel (R$)", value=40.0, step=1.0)

    st.markdown("---")
    st.subheader("üì• Dados do Gerenciador (CSV)")
    uploaded = st.file_uploader("Envie o CSV exportado do Gerenciador de An√∫ncios (separador v√≠rgula).", type=["csv"])

# =========================
# Helpers
# =========================
def daterange(start_date, end_date, include_weekends=True):
    days = []
    d = start_date
    while d <= end_date:
        if include_weekends or d.weekday() < 5:
            days.append(d)
        d += timedelta(days=1)
    return days

def build_targets(dates, period_goal_value, goal_type, aov, to_checkout, checkout_conv, target_roas):
    if goal_type == "Faturamento":
        rev_goal = float(period_goal_value)
        purchases_goal = rev_goal / aov if aov > 0 else 0.0
    else:
        purchases_goal = float(period_goal_value)
        rev_goal = purchases_goal * aov

    sessions_needed = purchases_goal / (to_checkout * checkout_conv) if (to_checkout > 0 and checkout_conv > 0) else 0.0
    spend_budget = rev_goal / target_roas if target_roas > 0 else 0.0
    roi = (rev_goal - spend_budget) / spend_budget if spend_budget > 0 else 0.0

    n_days = max(1, len(dates))
    daily_targets = pd.DataFrame({
        "data": dates,
        "meta_faturamento": rev_goal / n_days,
        "meta_compras": purchases_goal / n_days,
        "meta_sessoes": sessions_needed / n_days,
        "meta_investimento": spend_budget / n_days
    })
    totals = {
        "faturamento": rev_goal,
        "compras": purchases_goal,
        "sessoes": sessions_needed,
        "investimento": spend_budget,
        "roi_estimado": roi
    }
    return daily_targets, totals

def pct(a, b):
    return (a/b) if b and b != 0 else 0.0

# =========================
# Metas (semana e m√™s)
# =========================
week_start_dt = datetime.combine(week_start, datetime.min.time())
week_end_dt = week_start_dt + timedelta(days=6)
week_days = daterange(week_start_dt.date(), week_end_dt.date(), include_weekends)

weekly_df, weekly_totals = build_targets(
    week_days, weekly_goal_value, goal_type, aov, to_checkout, checkout_conv, target_roas
)

month_first = month_ref.replace(day=1)
if month_first.month == 12:
    next_month_first = month_first.replace(year=month_first.year+1, month=1)
else:
    next_month_first = month_first.replace(month=month_first.month+1)
month_last = next_month_first - timedelta(days=1)

month_days = daterange(month_first, month_last, include_weekends=True)
monthly_df, monthly_totals = build_targets(
    month_days, monthly_goal_value, goal_type, aov, to_checkout, checkout_conv, target_roas
)

# =========================
# Se√ß√£o 1 ‚Äî KPIs de Meta (planejado)
# =========================
st.markdown("## üéØ Metas Planejadas")
k1, k2, k3, k4, k5 = st.columns(5)
k1.metric("Meta Semana (R$)", f"R$ {weekly_totals['faturamento']:,.0f}".replace(",", "."))
k2.metric("Meta Semana (Compras)", f"{weekly_totals['compras']:,.0f}".replace(",", "."))
k3.metric("Sess√µes Necess√°rias (semana)", f"{weekly_totals['sessoes']:,.0f}".replace(",", "."))
k4.metric("Or√ßamento p/ ROAS alvo (semana)", f"R$ {weekly_totals['investimento']:,.0f}".replace(",", "."))
k5.metric("ROI Estimado (semana)", f"{weekly_totals['roi_estimado']*100:,.0f}%".replace(",", "."))

# =========================
# Se√ß√£o 2 ‚Äî Dados do Gerenciador (upload)
# =========================
st.markdown("---")
st.markdown("## üì• Performance Real (Gerenciador)")

if uploaded:
    # =========================
    # Leitura flex√≠vel + normaliza√ß√£o de cabe√ßalhos
    # =========================
    import re, unicodedata

    def _norm(s: str) -> str:
        s = unicodedata.normalize("NFKD", s)
        s = "".join(c for c in s if not unicodedata.combining(c))
        s = s.lower().strip()
        s = s.replace("\n", " ").replace("\r", " ")
        s = re.sub(r"\s+", " ", s)
        s = s.replace("(brl)", "").replace(" r$", "").strip()
        return s

    def _read_flex(file):
        for enc in ["utf-8", "latin-1", "utf-16", "cp1252"]:
            try:
                return pd.read_csv(file, sep=None, engine="python", encoding=enc)
            except Exception:
                continue
        return pd.read_csv(file)

    raw = _read_flex(uploaded)

    # Mapa de aliases -> nomes finais que seu dashboard usa
    ALIASES = {
        "Desativado/Ativado": ("desativado/ativado","ativado/desativado","status da campanha","estado"),
        "campanha": ("nome da campanha","campanha","nome da campanha (id)"),
        "Veicula√ß√£o": ("veiculacao da campanha","veiculacao","posicionamento"),
        "Resultados": ("resultados",),
        "Custo por resultado": ("custo por resultado","custo por resultados"),
        "Or√ßamento": ("orcamento","orcamento do conjunto de anuncios","orcamento do conjunto de an√∫ncios"),
        "Valor usado": ("valor usado","valor usado brl","valor gasto","valor gasto brl"),
        "Retorno sobre o investimento em publicidade (ROAS) das compras": ("roas das compras","retorno sobre o investimento em publicidade (roas) das compras","roas"),
        "Valor de convers√£o da compra": ("valor de conversao da compra","valor de convers√£o da compra","receita","faturamento"),
        "Custo por finaliza√ß√£o de compra iniciada": ("custo por finalizacao de compra iniciada","custo por inic. checkout","custo por checkout iniciado"),
        "Alcance": ("alcance",),
        "Impress√µes": ("impressoes","impress√µes"),
        "Frequ√™ncia": ("frequencia","frequ√™ncia"),
        "CPM (custo por 1.000 impress√µes)": ("cpm (custo por 1.000 impressoes)","cpm"),
        "Conex√£o": ("conexao","conex√£o"),
        "Convers√£o P√°gina": ("conversao pagina","conversao de pagina","convers√£o pagina","convers√£o de p√°gina","visualizacoes da pagina de destino"),
        "Entrega": ("entrega","entrega.1"),
        "Info. Pagamento / Entrega": ("info. pagamento / entrega","informacoes de pagamento / entrega","informa√ß√µes de pagamento / entrega"),
        "Compras / Inf. Pagamento": ("compras / inf. pagamento","compras/inf. pagamento"),
        "Convers√£o Checkout": ("conversao checkout","convers√£o checkout"),
        "Cliques no link": ("cliques no link","cliques"),
        "Visualiza√ß√µes da p√°gina de destino": ("visualizacoes da pagina de destino","visualiza√ß√µes da p√°gina de destino","page views"),
        "Adi√ß√µes ao carrinho": ("adicoes ao carrinho","adi√ß√µes ao carrinho","add to cart"),
        "Finaliza√ß√µes de compra iniciadas": ("finalizacoes de compra iniciadas","finaliza√ß√µes de compra iniciadas","checkout iniciado"),
        "Inclus√µes de informa√ß√µes de pagamento": ("inclusoes de informacoes de pagamento","inclus√µes de informa√ß√µes de pagamento","pagamento info"),
        "Compras": ("compras","purchases"),
        "CPC (custo por clique no link)": ("cpc (custo por clique no link)","cpc"),
        "CTR (taxa de cliques no link)": ("ctr (taxa de cliques no link)","ctr"),
        "Reprodu√ß√µes de 25% do v√≠deo": ("reproducoes de 25% do video","reprodu√ß√µes de 25% do v√≠deo"),
        "Reprodu√ß√µes de 50% do v√≠deo": ("reproducoes de 50% do video","reprodu√ß√µes de 50% do v√≠deo"),
        "Reprodu√ß√µes de 75% do v√≠deo": ("reproducoes de 75% do video","reprodu√ß√µes de 75% do v√≠deo"),
        "Reprodu√ß√µes de 95% do v√≠deo": ("reproducoes de 95% do video","reprodu√ß√µes de 95% do v√≠deo"),
        "Tempo m√©dio de reprodu√ß√£o do v√≠deo": ("tempo medio de reproducao do video","tempo m√©dio de reprodu√ß√£o do v√≠deo"),
    }

    norm_map = {_norm(c): c for c in raw.columns}
    rename_dict = {}
    for final_name, choices in ALIASES.items():
        for cand in choices:
            if cand in norm_map:
                rename_dict[norm_map[cand]] = final_name
                break

    df = raw.rename(columns=rename_dict).copy()
    df = df.loc[:, ~df.columns.duplicated()]

    # Convers√£o num√©rica robusta (formato BR)
    def _to_num(x):
        if pd.isna(x): return 0.0
        if isinstance(x, (int, float)): return float(x)
        s = str(x).strip().lower()
        s = s.replace("r$", "").replace("brl", "")
        s = s.replace(".", "").replace(",", ".")
        s = re.sub(r"[^0-9\.\-eE]", "", s)
        try:
            return float(s)
        except:
            return 0.0

    for col in [
        "Valor usado","Valor de convers√£o da compra","Compras",
        "CPC (custo por clique no link)","CTR (taxa de cliques no link)",
        "CPM (custo por 1.000 impress√µes)","Impress√µes","Alcance","Frequ√™ncia",
        "Cliques no link","Visualiza√ß√µes da p√°gina de destino","Adi√ß√µes ao carrinho",
        "Finaliza√ß√µes de compra iniciadas","Inclus√µes de informa√ß√µes de pagamento",
        "Custo por resultado","Custo por finaliza√ß√£o de compra iniciada",
    ]:
        if col in df.columns:
            df[col] = df[col].apply(_to_num)

    # =========================
    # Filtros (APENAS UMA VEZ)
    # =========================
    st.markdown("### üîé Filtros")
    colf1, colf2, colf3 = st.columns(3)
    with colf1:
        campanhas = ["(Todas)"] + sorted(df["campanha"].astype(str).unique().tolist()) if "campanha" in df.columns else ["(Todas)"]
        sel_campanha = st.selectbox("Campanha", campanhas)
    with colf2:
        status = ["(Todos)"] + sorted(df["Desativado/Ativado"].astype(str).unique().tolist()) if "Desativado/Ativado" in df.columns else ["(Todos)"]
        sel_status = st.selectbox("Status", status)
    with colf3:
        veics = ["(Todas)"] + sorted(df["Veicula√ß√£o"].astype(str).unique().tolist()) if "Veicula√ß√£o" in df.columns else ["(Todas)"]
        sel_veic = st.selectbox("Veicula√ß√£o", veics)

    filt = pd.Series(True, index=df.index)
    if "campanha" in df.columns and sel_campanha != "(Todas)":
        filt &= (df["campanha"].astype(str) == sel_campanha)
    if "Desativado/Ativado" in df.columns and sel_status != "(Todos)":
        filt &= (df["Desativado/Ativado"].astype(str) == sel_status)
    if "Veicula√ß√£o" in df.columns and sel_veic != "(Todas)":
        filt &= (df["Veicula√ß√£o"].astype(str) == sel_veic)

    dff = df.loc[filt].copy()
    # üî∏ S√≥ analisa linhas com gasto > 0
    if "Valor usado" in dff.columns:
        dff = dff[dff["Valor usado"] > 0].copy()

    # =========================
    # KPIs principais (real)
    # =========================
    invest = dff["Valor usado"].sum() if "Valor usado" in dff.columns else 0.0
    fatur = dff["Valor de convers√£o da compra"].sum() if "Valor de convers√£o da compra" in dff.columns else 0.0
    compras = dff["Compras"].sum() if "Compras" in dff.columns else 0.0
    roas = (fatur / invest) if invest > 0 else 0.0
    cpa = (invest / compras) if compras > 0 else 0.0
    cpc = dff["CPC (custo por clique no link)"].mean() if "CPC (custo por clique no link)" in dff.columns and len(dff)>0 else 0.0
    ctr = (dff["CTR (taxa de cliques no link)"].mean() / 100.0) if "CTR (taxa de cliques no link)" in dff.columns and len(dff)>0 else 0.0
# üî∏ CVR (cliques ‚Üí compra) com fallback para coluna "Cliques"
clicks_sum = dff["Cliques no link"].sum() if "Cliques no link" in dff.columns else 0.0
# fallback (algumas exports v√™m s√≥ como "Cliques")
if clicks_sum == 0 and "Cliques" in dff.columns:
    clicks_sum = dff["Cliques"].sum()
cvr = (compras / clicks_sum) if clicks_sum > 0 else 0.0

    st.markdown("### üìå KPIs ‚Äî Performance Real")
    kpi1, kpi2, kpi3, kpi4, kpi5, kpi6, kpi7 = st.columns(7)
    kpi1.metric("Investimento", f"R$ {invest:,.0f}".replace(",", "."))
    kpi2.metric("Faturamento", f"R$ {fatur:,.0f}".replace(",", "."))
    kpi3.metric("ROAS", f"{roas:,.2f}".replace(",", "."))
    kpi4.metric("CPA", f"R$ {cpa:,.2f}".replace(",", "."))
    kpi5.metric("CTR", f"{ctr*100:,.2f}%".replace(",", "."))
    kpi6.metric("CPC", f"R$ {cpc:,.2f}".replace(",", "."))
    kpi7.metric("CVR (Cliques‚ÜíCompra)", f"{cvr*100:,.2f}%".replace(",", "."))

    # Alertas
    alerts = []
    if roas < alert_roas_min:
        alerts.append(f"ROAS abaixo do m√≠nimo ( {roas:.2f} < {alert_roas_min:.2f} )")
    if cpa > alert_cpa_max:
        alerts.append(f"CPA acima do m√°ximo ( R$ {cpa:.2f} > R$ {alert_cpa_max:.2f} )")

    if alerts:
        st.error("üö® " + " | ".join(alerts))
    else:
        st.success("‚úÖ Dentro dos limites definidos de ROAS/CPA.")


    st.markdown("---")

    # =========================
    # Funil de convers√£o
    # =========================
    st.markdown("### üß≠ Funil de Convers√£o")
    def safe_sum(col): return dff[col].sum() if col in dff.columns else 0
    clicks   = safe_sum("Cliques no link")
    lpviews  = safe_sum("Visualiza√ß√µes da p√°gina de destino")
    addcart  = safe_sum("Adi√ß√µes ao carrinho")
    cko_init = safe_sum("Finaliza√ß√µes de compra iniciadas")
    pay_info = safe_sum("Inclus√µes de informa√ß√µes de pagamento")
    purchases= safe_sum("Compras")

    funil = pd.DataFrame({"etapa": ["Cliques","LP Views","Add to Cart","Checkout Iniciado","Info. Pagamento","Compras"],
                          "valor": [clicks, lpviews, addcart, cko_init, pay_info, purchases]})
    st.plotly_chart(px.funnel(funil, x="valor", y="etapa", title="Funil ‚Äî volume por etapa"), use_container_width=True)

    c1, c2, c3, c4, c5 = st.columns(5)
    def pct(a,b): return (a/b) if b else 0.0
    c1.metric("Cliques ‚Üí LP", f"{pct(lpviews, clicks)*100:,.1f}%".replace(",", "."))
    c2.metric("LP ‚Üí AddCart", f"{pct(addcart, lpviews)*100:,.1f}%".replace(",", "."))
    c3.metric("AddCart ‚Üí Checkout", f"{pct(cko_init, addcart)*100:,.1f}%".replace(",", "."))
    c4.metric("Checkout ‚Üí Pagamento", f"{pct(pay_info, cko_init)*100:,.1f}%".replace(",", "."))
    c5.metric("Pagamento ‚Üí Compra", f"{pct(purchases, pay_info)*100:,.1f}%".replace(",", "."))

    st.markdown("---")

    # =========================
    # Efici√™ncia de m√≠dia (por campanha)
    # =========================
    st.markdown("### üìà Efici√™ncia de M√≠dia (por Campanha)")
    if "campanha" in dff.columns:
        # refiltra por gasto > 0 (garantia)
        if "Valor usado" in dff.columns:
            dff = dff[dff["Valor usado"] > 0].copy()

        grp = dff.groupby("campanha").agg({
            "Valor usado":"sum",
            "Valor de convers√£o da compra":"sum",
            "Compras":"sum",
            "Impress√µes":"sum",
            "Cliques no link":"sum",
            "CPM (custo por 1.000 impress√µes)":"mean",
            "CPC (custo por clique no link)":"mean",
            "CTR (taxa de cliques no link)":"mean",
        }).reset_index()

        grp["ROAS"] = grp["Valor de convers√£o da compra"] / grp["Valor usado"].replace(0, np.nan)
        grp["CPA"]  = grp["Valor usado"] / grp["Compras"].replace(0, np.nan)
        grp["CPC_calc"] = grp["Valor usado"] / grp["Cliques no link"].replace(0, np.nan)
        grp["CPM_calc"] = (grp["Valor usado"] / grp["Impress√µes"].replace(0, np.nan)) * 1000.0

        tabs = st.tabs(["CPA", "CPC", "CPM", "ROAS"])
        with tabs[0]:
            st.plotly_chart(px.bar(grp, x="campanha", y="CPA", title="CPA por campanha"), use_container_width=True)
        with tabs[1]:
            st.plotly_chart(px.bar(grp, x="campanha", y=grp["CPC (custo por clique no link)"].fillna(grp["CPC_calc"]), title="CPC por campanha"), use_container_width=True)
        with tabs[2]:
            st.plotly_chart(px.bar(grp, x="campanha", y=grp["CPM (custo por 1.000 impress√µes)"].fillna(grp["CPM_calc"]), title="CPM por campanha"), use_container_width=True)
        with tabs[3]:
            st.plotly_chart(px.bar(grp, x="campanha", y="ROAS", title="ROAS por campanha"), use_container_width=True)
    else:
        st.info("A coluna 'campanha' n√£o foi encontrada para agrupar efici√™ncia de m√≠dia.")


    st.markdown("---")

    # =========================
    # Engajamento de v√≠deo
    # =========================
    st.markdown("### üé• Engajamento de V√≠deo")
    vid_cols = ["Reprodu√ß√µes de 25% do v√≠deo","Reprodu√ß√µes de 50% do v√≠deo","Reprodu√ß√µes de 75% do v√≠deo","Reprodu√ß√µes de 95% do v√≠deo"]
    has_video = all([c in dff.columns for c in vid_cols])
    if has_video:
        totals = dff[vid_cols].sum()
        df_vid = pd.DataFrame({"etapa":["25%","50%","75%","95%"], "reproducoes":[totals[0], totals[1], totals[2], totals[3]]})
        st.plotly_chart(px.line(df_vid, x="etapa", y="reproducoes", markers=True, title="Reten√ß√£o de V√≠deo (volume total)"), use_container_width=True)
        if "Tempo m√©dio de reprodu√ß√£o do v√≠deo" in dff.columns:
            tempo_med = dff["Tempo m√©dio de reprodu√ß√£o do v√≠deo"].apply(_to_num).mean()  # <- aqui troquei para _to_num
            st.metric("‚è±Ô∏è Tempo m√©dio de reprodu√ß√£o", f"{tempo_med:,.1f} s".replace(",", "."))
    else:
        st.info("Para reten√ß√£o, inclua no CSV as colunas de reprodu√ß√£o em 25/50/75/95%.")

    st.markdown("---")

        # =========================
    # Ranking de campanhas (robusto a colunas ausentes)
    # =========================
    st.markdown("### üèÜ Ranking de Campanhas")

    if "campanha" not in dff.columns:
        st.info("A coluna 'campanha' n√£o foi encontrada para exibir o ranking.")
    else:
        # Quais m√©tricas temos de fato?
        have = set(dff.columns)
        metrics_defs = {
            "Desativado/Ativado": ("first", "Status"),
            "Veicula√ß√£o": ("first", "Veicula√ß√£o"),
            "Valor usado": ("sum", "Investimento (R$)"),
            "Valor de convers√£o da compra": ("sum", "Faturamento (R$)"),
            "Compras": ("sum", "Compras"),
        }

        # Monta dict de agrega√ß√µes s√≥ com as colunas dispon√≠veis
        agg_dict = {col: func for col, (func, _) in metrics_defs.items() if col in have}

        if not agg_dict:
            st.info("Nenhuma m√©trica dispon√≠vel para ranquear campanhas (faltam colunas como Valor usado, Faturamento, Compras‚Ä¶).")
        else:
            rank = dff.groupby("campanha").agg(agg_dict).reset_index()

            # KPIs derivados se poss√≠veis
            if "Valor usado" in rank.columns and "Valor de convers√£o da compra" in rank.columns:
                rank["ROAS"] = rank["Valor de convers√£o da compra"] / rank["Valor usado"].replace(0, np.nan)
            if "Valor usado" in rank.columns and "Compras" in rank.columns:
                rank["CPA"] = rank["Valor usado"] / rank["Compras"].replace(0, np.nan)

            # Op√ß√µes de ordena√ß√£o s√≥ para colunas que existem
            order_opts = []
            if "ROAS" in rank.columns: order_opts.append("ROAS desc")
            if "CPA"  in rank.columns: order_opts.append("CPA asc")
            if "Valor de convers√£o da compra" in rank.columns: order_opts.append("Faturamento desc")
            if "Valor usado" in rank.columns: order_opts.append("Investimento desc")
            if not order_opts:
                order_opts = ["Campanha A‚ÜíZ"]

            order_by = st.selectbox("Ordenar ranking por:", order_opts)
            if order_by == "ROAS desc":
                rank = rank.sort_values("ROAS", ascending=False)
            elif order_by == "CPA asc":
                rank = rank.sort_values("CPA", ascending=True)
            elif order_by == "Faturamento desc":
                rank = rank.sort_values("Valor de convers√£o da compra", ascending=False)
            elif order_by == "Investimento desc":
                rank = rank.sort_values("Valor usado", ascending=False)
            else:
                rank = rank.sort_values("campanha", ascending=True)

            # Renomeia colunas amig√°veis (s√≥ as que existem)
            rename_map = {col: label for col, (_, label) in metrics_defs.items() if col in rank.columns}
            rename_map.update({"campanha": "Campanha"})
            st.dataframe(rank.rename(columns=rename_map), use_container_width=True)


    st.markdown("---")

    # =========================
    # Vis√£o Temporal (se houver coluna de Data)
    # =========================
    st.markdown("### üìÖ Vis√£o Temporal")
    date_col = next((c for c in ["Data","data","date","Dia","dia"] if c in dff.columns), None)
    if date_col:
        dff["_date"] = pd.to_datetime(dff[date_col], errors="coerce", dayfirst=True)
        t = dff.dropna(subset=["_date"]).groupby("_date").agg({
            "Valor usado":"sum",
            "Valor de convers√£o da compra":"sum",
            "Compras":"sum"
        }).reset_index().sort_values("_date")
        t["ROAS"] = t["Valor de convers√£o da compra"] / t["Valor usado"].replace(0, np.nan)

        tabs_t = st.tabs(["ROAS di√°rio","Investimento di√°rio","Compras di√°rias"])
        with tabs_t[0]: st.plotly_chart(px.line(t, x="_date", y="ROAS", title="ROAS di√°rio"), use_container_width=True)
        with tabs_t[1]: st.plotly_chart(px.line(t, x="_date", y="Valor usado", title="Investimento di√°rio"), use_container_width=True)
        with tabs_t[2]: st.plotly_chart(px.line(t, x="_date", y="Compras", title="Compras di√°rias"), use_container_width=True)
    else:
        st.info("Para vis√£o temporal, inclua uma coluna de data no CSV (ex.: 'Data').")


else:
    st.info("Envie o CSV do Gerenciador para liberar os pain√©is de performance real.")

# =========================
# Metas ‚Äî Acompanhamento Di√°rio (semana)
# =========================
st.markdown("---")
st.subheader("‚úÖ Acompanhamento Di√°rio ‚Äî Semana (Metas & Real)")
st.caption("Edite os campos de realizado. Baixe a planilha, atualize no Excel/Sheets e reenvie quando quiser.")

week_live = weekly_df.copy()
week_live["real_investimento"] = 0.0
week_live["real_sessoes"] = 0.0
week_live["real_checkouts"] = 0.0
week_live["real_compras"] = 0.0
week_live["real_faturamento"] = 0.0

edited_week = st.data_editor(
    week_live,
    column_config={
        "data": st.column_config.DateColumn("Data", format="DD/MM/YYYY", step=1),
        "meta_faturamento": st.column_config.NumberColumn("Meta Faturamento (R$)"),
        "meta_compras": st.column_config.NumberColumn("Meta Compras (n¬∫)"),
        "meta_sessoes": st.column_config.NumberColumn("Meta Sess√µes (n¬∫)"),
        "meta_investimento": st.column_config.NumberColumn("Meta Investimento (R$)"),
        "real_investimento": st.column_config.NumberColumn("Real Investimento (R$)"),
        "real_sessoes": st.column_config.NumberColumn("Real Sess√µes (n¬∫)"),
        "real_checkouts": st.column_config.NumberColumn("Real Checkouts (n¬∫)"),
        "real_compras": st.column_config.NumberColumn("Real Compras (n¬∫)"),
        "real_faturamento": st.column_config.NumberColumn("Real Faturamento (R$)"),
    },
    hide_index=True,
    use_container_width=True,
    num_rows="dynamic",
)

st.markdown("### üìå KPIs Semanais (Meta)")
kpi_cols = st.columns(5)
kpi_cols[0].metric("Meta Faturamento", f"R$ {weekly_totals['faturamento']:,.0f}".replace(",", "."))
kpi_cols[1].metric("Meta Compras", f"{weekly_totals['compras']:,.0f}".replace(",", "."))
kpi_cols[2].metric("Meta Sess√µes", f"{weekly_totals['sessoes']:,.0f}".replace(",", "."))
kpi_cols[3].metric("Or√ßamento (ROAS alvo)", f"R$ {weekly_totals['investimento']:,.0f}".replace(",", "."))
kpi_cols[4].metric("ROI Estimado", f"{weekly_totals['roi_estimado']*100:,.0f}%".replace(",", "."))

realized = edited_week[["real_investimento","real_sessoes","real_checkouts","real_compras","real_faturamento"]].sum()
realized_cols = st.columns(5)
realized_cols[0].metric("Investimento (Real)", f"R$ {realized['real_investimento']:,.0f}".replace(",", "."))
realized_cols[1].metric("Sess√µes (Real)", f"{realized['real_sessoes']:,.0f}".replace(",", "."))
realized_cols[2].metric("Checkouts (Real)", f"{realized['real_checkouts']:,.0f}".replace(",", "."))
realized_cols[3].metric("Compras (Real)", f"{realized['real_compras']:,.0f}".replace(",", "."))
realized_cols[4].metric("Faturamento (Real)", f"R$ {realized['real_faturamento']:,.0f}".replace(",", "."))

st.markdown("---")
left, right = st.columns(2)
with left:
    df_plot = edited_week.copy()
    df_plot["data"] = pd.to_datetime(df_plot["data"])
    df_plot = df_plot.sort_values("data")
    df_plot["meta_fat_cum"] = df_plot["meta_faturamento"].cumsum()
    df_plot["real_fat_cum"] = df_plot["real_faturamento"].cumsum()
    fig = px.line(df_plot, x="data", y=["meta_fat_cum","real_fat_cum"], title="Faturamento Acumulado ‚Äî Meta vs Real")
    st.plotly_chart(fig, use_container_width=True)

with right:
    df_inv = edited_week.copy()
    df_inv["data"] = pd.to_datetime(df_inv["data"])
    df_inv = df_inv.sort_values("data")
    df_inv["meta_inv_cum"] = df_inv["meta_investimento"].cumsum()
    df_inv["real_inv_cum"] = df_inv["real_investimento"].cumsum()
    fig2 = px.line(df_inv, x="data", y=["meta_inv_cum","real_inv_cum"], title="Investimento Acumulado ‚Äî Meta vs Real")
    st.plotly_chart(fig2, use_container_width=True)

# Downloads
st.markdown("### ‚¨áÔ∏è Exportar Planos de Meta")
wcsv = weekly_df.copy()
wcsv["data"] = pd.to_datetime(wcsv["data"]).dt.strftime("%Y-%m-%d")
mcsv = monthly_df.copy()
mcsv["data"] = pd.to_datetime(mcsv["data"]).dt.strftime("%Y-%m-%d")
st.download_button("Baixar Plano Semanal (CSV)", data=wcsv.to_csv(index=False).encode("utf-8"), file_name="plano_semanal.csv", mime="text/csv")
st.download_button("Baixar Plano Mensal (CSV)", data=mcsv.to_csv(index=False).encode("utf-8"), file_name="plano_mensal.csv", mime="text/csv")

st.info("üíæ Para persist√™ncia real (Google Sheets/Supabase/DB), adapte o c√≥digo de leitura/grava√ß√£o. O upload l√™ o CSV exportado do Gerenciador.")

# =========================
# üß™ Teste de Criativos
# =========================
st.markdown("---")
st.header("üß™ Teste de Criativos ‚Äî An√°lise e Campe√µes")

with st.expander("Como usar"):
    st.write(
        "- Exporte do Gerenciador o CSV da **campanha de teste de criativos** (n√≠vel an√∫ncio).\n"
        "- Colunas √∫teis (qualquer varia√ß√£o √© aceita): Campanha, Conjunto, An√∫ncio/ID, Valor gasto, Impress√µes, Cliques, Compras, Receita/Valor de convers√£o.\n"
        "- Opcional: Views da LP, thumbnails/links da pe√ßa para pr√©-visualiza√ß√£o."
    )

uploaded_creatives = st.file_uploader("üì• Suba o CSV do teste de criativos", type=["csv"], key="upload_creatives")

if uploaded_creatives:
    import re, unicodedata

    def _norm(s: str) -> str:
        s = unicodedata.normalize("NFKD", s)
        s = "".join(c for c in s if not unicodedata.combining(c))
        s = s.lower().strip()
        s = s.replace("\n", " ").replace("\r", " ")
        s = re.sub(r"\s+", " ", s)
        s = s.replace("(brl)", "").replace(" r$", "").strip()
        return s

    def _read_flex(file):
        for enc in ["utf-8", "latin-1", "utf-16", "cp1252"]:
            try:
                return pd.read_csv(file, sep=None, engine="python", encoding=enc)
            except Exception:
                continue
        return pd.read_csv(file)

    def _to_num(x):
        if pd.isna(x): return 0.0
        if isinstance(x, (int, float)): return float(x)
        s = str(x).lower().replace("r$", "").replace("brl", "")
        s = s.replace(".", "").replace(",", ".")
        s = re.sub(r"[^0-9\.\-eE]", "", s)
        try: return float(s)
        except: return 0.0

    rawc = _read_flex(uploaded_creatives)
    norm_map = {_norm(c): c for c in rawc.columns}

    # Aliases flex√≠veis
    A = {
        "campanha": ("campanha","campaign name","nome da campanha"),
        "conjunto": ("conjunto","ad set name","conjunto de an√∫ncios","conjunto de anuncios"),
        "anuncio": ("an√∫ncio","anuncio","ad name","nome do an√∫ncio","nome do anuncio"),
        "ad_id": ("id do an√∫ncio","id do anuncio","ad id","id"),
        "gasto": ("valor usado","valor gasto","spend","amount spent","valor usado brl","gasto"),
        "imp": ("impress√µes","impressoes","impressions"),
        "clicks": (
    "cliques no link","clicks","link clicks",
    "cliques (todos)","cliques","cliques no link (todos)"
),
        "lpv": ("visualiza√ß√µes da p√°gina de destino","visualizacoes da pagina de destino","landing page views","lp views"),
        "compras": ("compras","purchases"),
        "receita": ("valor de convers√£o da compra","valor de conversao da compra","purchase conversion value","revenue","faturamento"),
        "thumb": ("thumbnail","image url","creativo","cria√ß√£o","link da midia","link da m√≠dia"),
        "data": ("data","date","dia"),
    }

    def pick(*keys, default=None):
        for k in keys:
            nk = _norm(k)
            if nk in norm_map: return norm_map[nk]
        return default

    cols = {k: pick(*v) for k, v in A.items()}
    dfc = rawc.rename(columns={v: k for k, v in cols.items() if v}).copy()

    # Converte num√©ricos
    for c in ["gasto","imp","clicks","lpv","compras","receita"]:
        if c in dfc.columns: dfc[c] = dfc[c].apply(_to_num)

    # Filtros b√°sicos
    colf1, colf2, colf3 = st.columns(3)
    with colf1:
        sel_camp = st.selectbox("Campanha", ["(Todas)"] + sorted(dfc.get("campanha", pd.Series([""])).dropna().astype(str).unique().tolist())) if "campanha" in dfc.columns else "(Todas)"
    with colf2:
        sel_set = st.selectbox("Conjunto", ["(Todos)"] + sorted(dfc.get("conjunto", pd.Series([""])).dropna().astype(str).unique().tolist())) if "conjunto" in dfc.columns else "(Todos)"
    with colf3:
        min_spend = st.number_input("Gasto m√≠nimo p/ considerar (R$)", value=10.0, step=5.0)

    filt = pd.Series(True, index=dfc.index)
    if "campanha" in dfc.columns and sel_camp != "(Todas)":
        filt &= (dfc["campanha"].astype(str) == sel_camp)
    if "conjunto" in dfc.columns and sel_set != "(Todos)":
        filt &= (dfc["conjunto"].astype(str) == sel_set)

    dfc = dfc.loc[filt].copy()

    if "gasto" in dfc.columns:
        dfc = dfc[dfc["gasto"] >= float(min_spend)].copy()

    if dfc.empty:
        st.warning("Nenhum criativo com os filtros atuais (ou acima do gasto m√≠nimo).")
        st.stop()

    # Chave do criativo (an√∫ncio ou id)
    key_col = "anuncio" if "anuncio" in dfc.columns else ("ad_id" if "ad_id" in dfc.columns else None)
    if key_col is None:
        st.error("N√£o achei coluna de identifica√ß√£o do criativo (ex.: 'An√∫ncio' ou 'Ad ID').")
        st.stop()

    # Agrega√ß√£o por criativo
    grp = dfc.groupby(key_col).agg({
        **({ "gasto":"sum" } if "gasto" in dfc.columns else {}),
        **({ "imp":"sum" } if "imp" in dfc.columns else {}),
        **({ "clicks":"sum" } if "clicks" in dfc.columns else {}),
        **({ "lpv":"sum" } if "lpv" in dfc.columns else {}),
        **({ "compras":"sum" } if "compras" in dfc.columns else {}),
        **({ "receita":"sum" } if "receita" in dfc.columns else {}),
    }).reset_index().rename(columns={key_col:"Criativo"})

    # M√©tricas derivadas
    eps = 1e-9
    if "imp" in grp.columns and "clicks" in grp.columns:
        grp["CTR"] = grp["clicks"] / (grp["imp"] + eps)
    if "clicks" in grp.columns and "compras" in grp.columns:
        grp["CVR"] = grp["compras"] / (grp["clicks"] + eps)
    if "gasto" in grp.columns and "clicks" in grp.columns:
        grp["CPC"] = grp["gasto"] / (grp["clicks"] + eps)
    if "gasto" in grp.columns and "imp" in grp.columns:
        grp["CPM"] = (grp["gasto"] / (grp["imp"] + eps)) * 1000.0
    if "gasto" in grp.columns and "compras" in grp.columns:
        grp["CPA"] = grp["gasto"] / (grp["compras"] + eps)
    if "receita" in grp.columns and "gasto" in grp.columns:
        grp["ROAS"] = grp["receita"] / (grp["gasto"] + eps)

    # Signific√¢ncia simples (propor√ß√£o z) vs. m√©dia da amostra
    def prop_z_test(success_a, n_a, p_pool):
        # z = (p_a - p_pool) / sqrt(p_pool*(1-p_pool)/n_a)
        if n_a <= 0 or p_pool<=0 or p_pool>=1: return np.nan
        p_a = success_a / n_a
        se = np.sqrt(p_pool*(1-p_pool)/(n_a+eps))
        if se==0: return np.nan
        z = (p_a - p_pool)/se
        # p-value bicaudal aproximado
        from math import erf, sqrt
        p = 2*(1 - 0.5*(1+erf(abs(z)/sqrt(2))))
        return p

    # p-valor para CTR e CVR (se existirem)
    if "CTR" in grp.columns and "clicks" in grp.columns and "imp" in grp.columns:
        p_ctr_base = (dfc["clicks"].sum())/max(dfc["imp"].sum(), eps)
        grp["p_CTR"] = grp.apply(lambda r: prop_z_test(r["clicks"], r["imp"], p_ctr_base), axis=1)
    if "CVR" in grp.columns and "compras" in grp.columns and "clicks" in grp.columns:
        p_cvr_base = (dfc["compras"].sum())/max(dfc["clicks"].sum(), eps)
        grp["p_CVR"] = grp.apply(lambda r: prop_z_test(r["compras"], r["clicks"], p_cvr_base), axis=1)

    # Regras de campe√£o
    st.subheader("üèÜ Campe√µes")
    colr1, colr2, colr3 = st.columns(3)
    with colr1:
        rank_metric = st.selectbox("M√©trica para ranquear", [m for m in ["ROAS","CPA","CTR","CVR","Compras","Receita","Gasto"] if m in grp.columns] or ["ROAS"])
    with colr2:
        top_n = st.slider("Quantos destacar", 1, min(10, len(grp)), value=min(3, len(grp)))
    with colr3:
        p_thresh = st.selectbox("Signific√¢ncia (p-value)", ["(ignorar)","0.10","0.05","0.01"], index=2)

    # Ordena√ß√£o
    asc = True if rank_metric in ["CPA"] else False
    if rank_metric.lower() == "compras" and "compras" in grp.columns:
        grp["_sort"] = grp["compras"]
        asc = False
    elif rank_metric.lower() == "receita" and "receita" in grp.columns:
        grp["_sort"] = grp["receita"]; asc = False
    elif rank_metric.lower() == "gasto" and "gasto" in grp.columns:
        grp["_sort"] = grp["gasto"]; asc = False
    else:
        grp["_sort"] = grp.get(rank_metric, pd.Series(np.zeros(len(grp))))

    board = grp.sort_values("_sort", ascending=asc).drop(columns=["_sort"])

    # Aplica crit√©rio de p-valor se selecionado
    if p_thresh != "(ignorar)":
        cut = float(p_thresh)
        # se ranqueando por CTR usa p_CTR, se CVR usa p_CVR; caso contr√°rio, aceita se qualquer um for significativo
        if rank_metric == "CTR" and "p_CTR" in board.columns:
            board = board[(board["p_CTR"] <= cut) | (board["p_CTR"].isna())]
        elif rank_metric == "CVR" and "p_CVR" in board.columns:
            board = board[(board["p_CVR"] <= cut) | (board["p_CVR"].isna())]
        elif {"p_CTR","p_CVR"}.issubset(board.columns):
            board = board[(board["p_CTR"] <= cut) | (board["p_CVR"] <= cut) | (board["p_CTR"].isna() & board["p_CVR"].isna())]

    # Marca√ß√£o de campe√µes
    board["Campe√£o"] = False
    board.loc[board.index[:top_n], "Campe√£o"] = True

    # Formata√ß√£o amig√°vel
    def _fmt_pct(x): return "" if pd.isna(x) else f"{x*100:,.2f}%".replace(",", ".")
    def _fmt_moeda(x): return "" if pd.isna(x) else f"R$ {x:,.2f}".replace(",", ".")
    def _fmt_p(x): return "" if pd.isna(x) else f"{x:.3f}"

    show = board.copy()
    rename = {
        "gasto":"Gasto","imp":"Impress√µes","clicks":"Cliques","lpv":"LP Views",
        "compras":"Compras","receita":"Receita","CTR":"CTR","CVR":"CVR",
        "CPC":"CPC","CPM":"CPM","CPA":"CPA","ROAS":"ROAS","p_CTR":"p(CTR)","p_CVR":"p(CVR)"
    }
    show = show.rename(columns=rename)

    # Apresenta√ß√£o
    st.markdown("#### Ranking de Criativos")
    st.dataframe(
        show.style
            .format({
                "CTR": _fmt_pct, "CVR": _fmt_pct,
                "CPC": _fmt_moeda, "CPM": _fmt_moeda, "CPA": _fmt_moeda, "ROAS": "{:,.2f}".format,
                "Gasto": _fmt_moeda, "Receita": _fmt_moeda,
                "p(CTR)": _fmt_p, "p(CVR)": _fmt_p
            })
            .apply(lambda s: ["background-color:#e6ffe6" if (show.loc[idx, "Campe√£o"] is True) else "" for idx in s.index], axis=0),
        use_container_width=True
    )

    # Galeria opcional dos campe√µes (se tiver thumbnail/link)
    thumbs_col = None
    for cand in ["thumb","image url","thumbnail","link da midia","link da m√≠dia"]:
        if cand in [c.lower() for c in rawc.columns]:
            thumbs_col = norm_map.get(cand, None)
            break

    if thumbs_col and thumbs_col in rawc.columns:
        st.markdown("#### Galeria ‚Äî Campe√µes")
        champs = board[board["Campe√£o"]].merge(dfc[[key_col, thumbs_col]].drop_duplicates(), left_on="Criativo", right_on=key_col if key_col!="anuncio" else "anuncio", how="left")
        cols = st.columns(min(4, len(champs)))
        i = 0
        for _, r in champs.iterrows():
            with cols[i % len(cols)]:
                st.caption(str(r["Criativo"]))
                st.image(r.get(thumbs_col), use_container_width=True)
            i += 1

    # Download do ranking
    st.download_button(
        "üì§ Baixar ranking de criativos (CSV)",
        data=board.to_csv(index=False).encode("utf-8"),
        file_name="ranking_criativos.csv",
        mime="text/csv"
    )
else:
    st.info("Para analisar criativos, suba o CSV espec√≠fico da campanha de teste.")
